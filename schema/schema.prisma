generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins", "tracing", "prismaSchemaFolder", "views", "postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [postgis]
}

model FileRecord {
  id        String   @id @default(uuid())
  uid       Int      @unique @default(autoincrement())
  name      String
  path      String   @unique
  size      Int?
  mimetype  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  width     Int?
  height    Int?
  ratio     Float?
  users     User[]

  deletedAt DateTime?

  @@index([path])
}

model Request {
  id           String         @id @default(uuid())
  uid          Int            @unique @default(autoincrement())
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  status       RequestStatus  @default(PENDING)
  userId       String
  user         User           @relation(fields: [userId], references: [id])
  message      String?
  Notification Notification[]
  email        String?        @unique @db.VarChar(255)
  firstName    String?        @db.VarChar(255)
  lastName     String?        @db.VarChar(255)
  phoneNumber  String         @db.VarChar(20)
}

model Report {
  id        String       @id @default(uuid())
  uid       Int          @unique @default(autoincrement())
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  caseId    Int          @default(autoincrement())
  userId    String
  user      User         @relation(fields: [userId], references: [id])
  reason    String       @db.Text
  status    ReportStatus @default(PENDING)
  meta      Json
  type      ReportType?

  // entity which the report is related to
  referenceType ReportReferenceType?
  referenceId   String?
}

model Address {
  id        String   @id @default(uuid())
  uid       Int      @unique @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  street    String?
  city      String?
  town      String?
  lga       String?
  state     String?
  country   String?
  userId    String
  user      User     @relation(fields: [userId], references: [id])

  active Boolean @default(true)

  @@index([userId])
}

model Notification {
  id            String               @id @default(uuid())
  uid           Int                  @unique @default(autoincrement())
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  ownerId       String
  owner         User                 @relation("NotificationOwner", fields: [ownerId], references: [id])
  status        NotificationStatus   @default(UNREAD)
  type          NotificationType
  category      NotificationCategory
  transactionId String?
  transaction   Transaction?         @relation(fields: [transactionId], references: [id])
  requestId     String?
  request       Request?             @relation(fields: [requestId], references: [id])
  inviteId      String?
  invite        Invite?              @relation(fields: [inviteId], references: [id])
}

model UserActivity {
  id        String   @id @default(uuid())
  uid       Int      @unique @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId   String
  user     User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  meta     Json?
  activity UserActivityType
}

model DevicePNToken {
  id        String              @id @default(uuid())
  uid       Int                 @unique @default(autoincrement())
  token     String
  userId    String?
  // device ID
  did       String              @unique
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
  user      User?               @relation(fields: [userId], references: [id])
  status    DevicePNTokenStatus @default(ACTIVE)

  deletedAt DateTime?

  @@index([userId])
  @@index([did])
}

model Invite {
  id        String       @id @default(uuid())
  uid       Int          @unique @default(autoincrement())
  createdAt DateTime     @default(now())
  status    InviteStatus @default(PENDING)

  inviteeId    String
  invitee      User           @relation("ReceivedInvite", fields: [inviteeId], references: [id])
  inviterId    String
  inviter      User           @relation("SentInvite", fields: [inviterId], references: [id])
  notification Notification[]
}

model Connection {
  id          String           @id @default(uuid())
  uid         Int              @unique @default(autoincrement())
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  requesterId String
  requester   User             @relation("RequestedConnection", fields: [requesterId], references: [id])
  addresseeId String
  addressee   User             @relation("RecievedConnection", fields: [addresseeId], references: [id])
  status      ConnectionStatus @default(PENDING)

  blockedById String?

  @@unique([requesterId, addresseeId])
  @@index([requesterId, addresseeId])
}

enum ConnectionStatus {
  PENDING
  ACCEPTED
  REJECTED
  CANCELED
  IGNORED
  BLOCKED
}

enum ApprovalStatus {
  PENDING
  APPROVED
  FLAGGED
}

enum InviteStatus {
  PENDING
  ACCEPTED
  CANCELED
}

enum OrderStatus {
  OPEN
  CLOSED
}

enum ReportStatus {
  PENDING
  OPEN
  ON_HOLD
  RESOLVED
  CLOSED
}

enum TransactionStatus {
  PENDING
  // for use mostly in withdrawals when transaction can no longer be cancelled
  PROCESSING
  SUCCESS
  FAILED
  CANCELED
}

enum TransactionType {
  DEBIT
  DEPOSIT
  REVERSED
  TOPUP
  WITHDRAWAL
  FEE_DEBIT
  FEE_DEPOSIT
}

enum OnlineStatus {
  ONLINE
  OFFLINE
}

enum RequestStatus {
  PENDING
  ACCEPTED
  REJECTED
  CANCELED
}

enum AppPlatform {
  IOS
  ANDROID
  WEB
}

enum OrderProvider {
  PAYSTACK
  FLUTTERWAVE
  FLICK
}

enum DevicePNTokenStatus {
  ACTIVE
  INACTIVE
}

enum UserActivityType {
  // USER MONITORING
  UserLoggedIn
  UserLoggedOut
  UserOnline
  UserOffline
  // PAYMENT ACTIVITY
  InitiatedOrder
  SuccessfulOrder
  FailedOrder
  CancelledOrder
  AddedBankAccount
  DepositSuccess
  DepositFailed
}

enum NotificationStatus {
  SEEN
  UNREAD
  READ
}

enum NotificationType {
  PAYMENT_DEPOSIT
  DELIVERY_WAYBILL_ADDED
  DELIVERY_ITEM_DELIVERED
  DELIVERY_CONFIRMED
}

enum NotificationCategory {
  UPDATES
  REQUESTS
}

enum ShippingMethod {
  PICKUP
  DELIVERY
}

enum UserStatus {
  ACTIVE
  VERIFIED
  DEACTIVATED
  SUSPENDED
  BANNED
  DELETED
}

enum ReportReferenceType {
  PROFILE
  TRANSACTION
}

enum ReportType {
  PICKUP_NOT_RECEIVED
  AFTER_PICKUP_ISSUE
  DELIVERY_NO_WAYBILL_ADDED
  DELIVERY_SHIPPING_ISSUE
  DELIVERY_ARRIVED_ISSUE
  AFTER_DELIVERY_RECEIPT_ISSUE
}
