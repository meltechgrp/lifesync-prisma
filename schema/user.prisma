model User {
  id              String      @id @default(uuid())
  uid             Int         @unique @default(autoincrement())
  email           String?     @unique @db.VarChar(255)
  firstName       String?     @db.VarChar(255)
  lastName        String?     @db.VarChar(255)
  middleName      String?     @db.VarChar(255)
  username        String?     @unique @db.VarChar(255)
  phoneNumber     String      @db.VarChar(20)
  photo           FileRecord? @relation(fields: [photoId], references: [id])
  /// This is the user phone number parsed with international format
  intlPhoneNumber String      @unique @db.VarChar(20)
  countryCode     String      @default("NG") @db.VarChar(3)

  isPhoneVerified Boolean @default(false)
  isEmailVerified Boolean @default(false)

  connectionHash String?

  requestedConnections Connection[]       @relation("RequestedConnection")
  receivedConnections  Connection[]       @relation("RecievedConnection")
  dob                  DateTime?
  height               Float?
  weight               Float?
  authToken            AuthToken[] /// @render(IGNORE)
  gender               String?
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  orders               Order[]
  photoId              String?
  role                 Role               @default(USER)
  reports              Report[]
  onlineStatus         UserOnlineStatus[]
  requests             Request[]
  activities           UserActivity[]

  familyMembers User[]         @relation("FamilyRelation")
  parent        User?          @relation("FamilyRelation", fields: [parentId], references: [id])
  parentId      String?
  notifications Notification[] @relation("NotificationOwner")
  addresses     Address[]

  deletedAt           DateTime?
  receivedInvites     Invite[]              @relation("ReceivedInvite")
  sentInvites         Invite[]              @relation("SentInvite")
  sessions            AdminUserSession[]
  VerificationToken   VerificationToken[]
  PasswordResetTokens PasswordResetTokens[]
  heartRates          HeartRate[]
  temperatures        Temperature[]
  bloodPressures      BloodPressure[]
  bloodOxygens        BloodOxygen[]
  stepsRecords        Steps[]
  sosMessages         Sos[]                 @relation("UserSosMessages")
  sosFamilyAlerts     Sos[]                 @relation("SosFamilyMembers")

  ///  Device push notification tokens
  devicePNTokens DevicePNToken[]

  status UserStatus @default(ACTIVE)

  @@unique([countryCode, phoneNumber])
  @@index([username, phoneNumber])
  @@map("users")
}

model AdminAllowedEmail {
  id    String @id @default(uuid())
  uid   Int    @unique @default(autoincrement())
  email String @unique @db.VarChar(255)

  allowedPages String[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model VerificationToken {
  id        String   @id @default(cuid())
  token     String   @unique
  expiresAt DateTime
  email     String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([email, token])
}

model AdminUserSession {
  id        String    @id @default(cuid())
  userId    String
  expiresAt DateTime?
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PasswordResetTokens {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserOnlineStatus {
  id             String       @id @default(uuid())
  uid            Int          @unique @default(autoincrement())
  userId         String
  user           User         @relation(fields: [userId], references: [id])
  status         OnlineStatus @default(ONLINE)
  deviceUniqueId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model AuthToken {
  id  String @id @default(uuid())
  uid Int    @unique @default(autoincrement())

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  expiredAt      DateTime
  userId         String
  deviceUniqueId String?
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  ADMIN
  USER
  DOCTOR
}

model OnlineUser {
  id             Int      @id @default(autoincrement())
  userId         String   @db.Uuid
  deviceUniqueId String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@unique([userId, deviceUniqueId])
}
