model User {
  id              String      @id @default(uuid())
  uid             Int         @unique @default(autoincrement())
  email           String?     @unique @db.VarChar(255)
  firstName       String?     @db.VarChar(255)
  lastName        String?     @db.VarChar(255)
  middleName      String?     @db.VarChar(255)
  username        String?     @unique @db.VarChar(255)
  phoneNumber     String      @db.VarChar(20)
  photo           FileRecord? @relation(fields: [photoId], references: [id])
  /// This is the user phone number parsed with international format
  intlPhoneNumber String      @unique @db.VarChar(20)
  countryCode     String      @default("NG") @db.VarChar(3)
  // USER | PLATFORM_PRIVATE_BOT | GATEKEEPER_AGENT
  userTypeId      String      @default("USER")
  bvn             String?

  isPhoneVerified Boolean @default(false)
  isEmailVerified Boolean @default(false)
  isBVNVerified   Boolean @default(false)
  isNINVerified   Boolean @default(false)
  isWalletFunded  Boolean @default(false)

  dob                  DateTime?
  authToken            AuthToken[] /// @render(IGNORE)
  /// KYC Stages (0 - phone not verified, 1 - phone verified, 2 - KYC 0 completed, 3 - KYC 1 completed)
  kycStage             Int?                   @default(0)
  gender               String?
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  group                Group[]
  groupMembers         GroupMember[]          @relation("USER")
  GroupRole            GroupRole[]
  SplitSlot            SplitSlot[]
  payments             Payment[]
  photoId              String?
  wallet               Wallet?
  deposits             Deposit[]
  withdraws            Withdrawal[]
  splitPlatformSuggest SplitPlatformSuggest[]
  messages             Message[]
  bankAccounts         BankAccount[]

  chatMember        ChatMember[]
  reports           Report[]
  chats             Chat[]
  messageRecipients MessageRecipient[]

  onlineStatus   UserOnlineStatus[]
  requests       Request[]
  voidedRequests Request[]          @relation("requestVoidedBy")
  posts          Post[]
  comments       PostComment[]
  reactions      Reaction[]
  activities     UserActivity[]
  /// This is md5 of user connections userIds
  connectionHash String?

  requestedConnections Connection[]   @relation("RequestedConnection")
  receivedConnections  Connection[]   @relation("RecievedConnection")
  inviter              GroupMember[]  @relation("INVITER")
  notifications        Notification[] @relation("NotificationOwner")
  addresses            Address[]

  isTestUser Boolean @default(false)

  deletedAt       DateTime?
  receivedInvites Invite[]  @relation("ReceivedInvite")
  sentInvites     Invite[]  @relation("SentInvite")

  ///  Device push notification tokens
  devicePNTokens DevicePNToken[]

  status       UserStatus     @default(ACTIVE)
  InviteCode   InviteCode[]
  PostFeed     PostFeed[]
  escrowRecord EscrowRecord[]

  gatepasses GatePass[]

  @@unique([countryCode, phoneNumber])
  @@index([username, phoneNumber])
}

model AdminUser {
  id             String    @id @default(uuid())
  uid            Int       @unique @default(autoincrement())
  email          String    @unique @db.VarChar(255)
  name           String?   @db.VarChar(255)
  emailVerified  DateTime?
  hashedPassword String?
  image          String?
  role           AdminRole @default(ADMIN)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  pinHash String?
  pinSalt String?

  sessions            AdminUserSession[]
  VerificationToken   VerificationToken[]
  PasswordResetTokens PasswordResetTokens[]
  reportComments      ReportComment[]
  approvals           Approval[]
}

model AdminAllowedEmail {
  id    String @id @default(uuid())
  uid   Int    @unique @default(autoincrement())
  email String @unique @db.VarChar(255)

  allowedPages String[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model VerificationToken {
  id        String    @id @default(cuid())
  token     String    @unique
  expiresAt DateTime
  email     String
  userId    String
  adminUser AdminUser @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([email, token])
}

model AdminUserSession {
  id        String    @id @default(cuid())
  userId    String
  expiresAt DateTime?
  adminUser AdminUser @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PasswordResetTokens {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId    String
  adminUser AdminUser @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserOnlineStatus {
  id             String       @id @default(uuid())
  uid            Int          @unique @default(autoincrement())
  userId         String
  user           User         @relation(fields: [userId], references: [id])
  status         OnlineStatus @default(ONLINE)
  deviceUniqueId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model AuthToken {
  id  String @id @default(uuid())
  uid Int    @unique @default(autoincrement())

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  expiredAt      DateTime
  userId         String
  deviceUniqueId String?
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
