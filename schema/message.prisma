model Message {
  id            String             @id @default(uuid())
  uid           Int                @unique @default(autoincrement())
  text          String
  tokenizedText Json?
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  senderId      String
  sender        User               @relation(fields: [senderId], references: [id])
  status        MessageStatus      @default(SENT)
  chat          Chat               @relation(fields: [chatId], references: [id])
  chatId        String
  qouteId       String?            
  qoute         Message?           @relation("MessageToMessage", fields: [qouteId], references: [id])
  references    MessageReference[]
  recipients    MessageRecipient[]
  messages      Message[]          @relation("MessageToMessage")

  deletedAt     DateTime?
  editedAt      DateTime?
  revisions     Json?
  
  files FileRecord[]
}

model MessageRecipient {
  id        String   @id @default(uuid())
  uid       Int      @unique @default(autoincrement())
  messageId String
  message   Message  @relation(fields: [messageId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  read      Boolean  @default(false)
  delivered Boolean  @default(false)
  chatId    String
  chat      Chat     @relation(fields: [chatId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([messageId, userId])
}

model MessageReference {
  id        String   @id @default(uuid())
  uid       Int      @unique @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  messageId   String
  message     Message              @relation(fields: [messageId], references: [id])
  referenceId String
  type        MessageReferenceType
}

model Chat {
  id                   String       @id @default(uuid())
  uid                  Int          @unique @default(autoincrement())
  membersIds           String[]
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt
  ownerId              String
  owner                User         @relation(fields: [ownerId], references: [id])
  chatMemberId         String?
  members              ChatMember[]
  isGroup              Boolean      @default(false)
  groupId              String?      @unique
  group                Group?       @relation(fields: [groupId], references: [id])
  messages             Message[]
  /// the number of messages in the chat, it helps to update the chat's updatedAt field
  count                Int          @default(0)
  lastMessageUpdatedAt DateTime?

  messageRecipients MessageRecipient[]
  requests          Request[]
  Notification      Notification[]

  @@index([membersIds])
  @@index([ownerId, groupId, isGroup])
}

model ChatMember {
  id        String   @id @default(uuid())
  uid       Int      @unique @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  chatId     String
  chat       Chat             @relation(fields: [chatId], references: [id])
  userId     String
  user       User             @relation(fields: [userId], references: [id])
  roles      ChatMemberRole[]
  muted      Boolean          @default(false)
  mutedUntil DateTime?

  @@unique([chatId, userId])
  @@index([chatId, userId])
}

model ChatMemberRole {
  id        String   @id @default(uuid())
  uid       Int      @unique @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  chatMemberId String
  chatMember   ChatMember    @relation(fields: [chatMemberId], references: [id])
  role         GroupRoleType
}
